[{"D:\\Cursos\\React\\gender-age-app\\src\\index.js":"1","D:\\Cursos\\React\\gender-age-app\\src\\GenderAgeApp.js":"2","D:\\Cursos\\React\\gender-age-app\\src\\components\\Main.js":"3","D:\\Cursos\\React\\gender-age-app\\src\\firebase\\firebase-config.js":"4"},{"size":204,"mtime":1620274449882,"results":"5","hashOfConfig":"6"},{"size":351,"mtime":1620421160401,"results":"7","hashOfConfig":"6"},{"size":7490,"mtime":1620420457784,"results":"8","hashOfConfig":"6"},{"size":533,"mtime":1620281277707,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1w16yze",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"D:\\Cursos\\React\\gender-age-app\\src\\index.js",[],["20","21"],"D:\\Cursos\\React\\gender-age-app\\src\\GenderAgeApp.js",[],"D:\\Cursos\\React\\gender-age-app\\src\\components\\Main.js",["22","23","24"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { storage } from '../firebase/firebase-config';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { Dots } from 'react-activity';\r\nimport 'react-activity/dist/react-activity.css'\r\n\r\nconst axios = require('axios').default;\r\n\r\nconst Main = () => {\r\n\r\n    const fileInputRef = useRef();\r\n\r\n    const [image, setImage] = useState();\r\n    const [preview, setPreview] = useState();\r\n    const [imageName, setImageName] = useState('');\r\n    const [transfered, setTransfered] = useState(0)\r\n    const [uploading, setUploading] = useState(false);\r\n    const [transferedFinished, setTransferedFinished] = useState(false)\r\n    const [result, setResult] = useState();\r\n    const [animating, setAnimating] = useState(false)\r\n\r\n    const handleChangeFile = (event) => {\r\n        event.preventDefault();\r\n\r\n        const file = event.target.files[0];\r\n\r\n        if (file && file.type.substr(0, 5) === 'image') {\r\n            setImage(file)\r\n        } else {\r\n            console.log('No es imagen')\r\n            setImage(null);\r\n        }\r\n    }\r\n\r\n    const handleFile = (image) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            setPreview(reader.result);\r\n        }\r\n        reader.readAsDataURL(image);\r\n    }\r\n\r\n    const handleFirebaseUpload = async () => {\r\n\r\n        console.log('start of upload...')\r\n\r\n        if (image) {\r\n            setUploading(true);\r\n            setTransfered(0);\r\n\r\n            const name = uuidv4();\r\n            const filename = name + '.jpg';\r\n\r\n            const storageRef = storage.ref(`uploaded/${filename}`);\r\n            const task = storageRef.put(image);\r\n\r\n            task.on('state_changed', (taskSnapshot) => {\r\n                console.log(`${taskSnapshot.bytesTransferred} transfered out of ${taskSnapshot.totalBytes}`);\r\n\r\n                setTransfered(\r\n                    Math.round(taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100\r\n                )\r\n            })\r\n\r\n\r\n            setImageName(name);\r\n\r\n            try {\r\n                await task;\r\n                const url = await storageRef.getDownloadURL();\r\n                setUploading(false);\r\n                setTransferedFinished(true);\r\n                return url;\r\n            } catch (error) {\r\n                console.log('Error downloading the image url')\r\n                return null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n\r\n        setAnimating(true);\r\n        await handleFirebaseUpload();\r\n    }\r\n\r\n    const handlePrediction = () => {\r\n        // console.log('Image Name', imageName)\r\n        axios.post('https://ai-backend-project.herokuapp.com/detectFaces', {\r\n            imageName: imageName.toString()\r\n        })\r\n            .then((res) => {\r\n                console.log((res.data.response[0].ageCofidence * 100).toFixed(2))\r\n                setResult(res.data);\r\n            })\r\n            .catch((e) => console.log('Prediciont Failed', e))\r\n            .finally(() => setAnimating(false))\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (image) {\r\n            handleFile(image)\r\n        } else {\r\n            setPreview(null)\r\n        }\r\n    }, [image]);\r\n\r\n    useEffect(() => {\r\n        if (transferedFinished) {\r\n            handlePrediction()\r\n        } else {\r\n            setResult(null)\r\n        }\r\n    }, [transferedFinished])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"image-container\">\r\n                <div className=\"image-container-1\">\r\n                    <div className=\"card\" >\r\n                        <img\r\n                            className=\"card-img-top\"\r\n                            src={preview ? preview : 'https://via.placeholder.com/500/F55F1E?text=Picture'}\r\n                            alt=\"preview\"\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"select-image\">\r\n                        <input\r\n                            className=\"file-button\"\r\n                            style={{ display: 'none' }}\r\n                            type=\"file\"\r\n                            ref={fileInputRef}\r\n                            accept=\"image/\"\r\n                            onChange={(event) => { handleChangeFile(event); }}\r\n                        />\r\n                        {\r\n                            preview ? (\r\n                                <button\r\n                                    className=\"image-button\"\r\n                                    onClick={() => {\r\n                                        setImage(null)\r\n                                        setResult(null)\r\n                                        setTransferedFinished(false)\r\n                                    }}\r\n                                >\r\n                                    Remove Image\r\n                                </button>\r\n                            ) : (\r\n                                <button\r\n                                    className=\"image-button\"\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        fileInputRef.current.click();\r\n                                    }}>\r\n                                    Open Image\r\n                                </button>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button className=\"button-prediction\" onClick={(e) => handleUpload(e)}>Predict</button>\r\n                    <Dots className=\"dots\" color=\"#727981\" size={35} speed={1} animating={animating} />\r\n                </div>\r\n\r\n                <div className=\"image-container-2\">\r\n                    <div className=\"card\">\r\n                        {\r\n                            result ? (\r\n\r\n                                <img\r\n                                    className=\"card-img-top\"\r\n                                    src={result ? result.imageURL : 'https://via.placeholder.com/500x600/0B6EEF?text=Imagen'}\r\n                                    alt=\"preview\" />\r\n                            ) : (\r\n                                <Skeleton variant=\"rect\" height={'400px'} />\r\n                            )\r\n                        }\r\n                        {\r\n                            result ? (\r\n                                <div className=\"card-body\">\r\n                                    <span><span style={{ fontWeight: 'bold' }}>Age: </span> {result ? result.response[0].age : ''}</span>\r\n                                    <span><span style={{ fontWeight: 'bold' }}>Success:  </span> {result ? (result.response[0].ageCofidence * 100).toFixed(2) + '%' : ''} </span>\r\n                                    <span><span style={{ fontWeight: 'bold' }}>Gender:   </span>{result ? result.response[0].gender : ''} </span>\r\n                                    <span><span style={{ fontWeight: 'bold' }}>Success:  </span>{result ? (result.response[0].genderCofidence * 100).toFixed(2) + '%' : ''} </span>\r\n                                </div>\r\n                            ) : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","D:\\Cursos\\React\\gender-age-app\\src\\firebase\\firebase-config.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":17,"column":12,"nodeType":"31","messageId":"32","endLine":17,"endColumn":22},{"ruleId":"29","severity":1,"message":"33","line":18,"column":12,"nodeType":"31","messageId":"32","endLine":18,"endColumn":21},{"ruleId":"34","severity":1,"message":"35","line":118,"column":8,"nodeType":"36","endLine":118,"endColumn":28,"suggestions":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'transfered' is assigned a value but never used.","Identifier","unusedVar","'uploading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlePrediction'. Either include it or remove the dependency array.","ArrayExpression",["40"],"no-global-assign","no-unsafe-negation",{"desc":"41","fix":"42"},"Update the dependencies array to be: [handlePrediction, transferedFinished]",{"range":"43","text":"44"},[3478,3498],"[handlePrediction, transferedFinished]"]