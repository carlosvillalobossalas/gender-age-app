[{"D:\\Cursos\\React\\gender-age-app\\src\\index.js":"1","D:\\Cursos\\React\\gender-age-app\\src\\GenderAgeApp.js":"2","D:\\Cursos\\React\\gender-age-app\\src\\components\\Main.js":"3","D:\\Cursos\\React\\gender-age-app\\src\\firebase\\firebase-config.js":"4","D:\\Cursos\\React\\gender-age-app\\src\\styles\\Main.js":"5"},{"size":204,"mtime":1620274449882,"results":"6","hashOfConfig":"7"},{"size":390,"mtime":1624059994052,"results":"8","hashOfConfig":"7"},{"size":10860,"mtime":1623386858280,"results":"9","hashOfConfig":"7"},{"size":533,"mtime":1620281277707,"results":"10","hashOfConfig":"7"},{"size":3725,"mtime":1624060792347,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1w16yze",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Cursos\\React\\gender-age-app\\src\\index.js",[],["25","26"],"D:\\Cursos\\React\\gender-age-app\\src\\GenderAgeApp.js",["27"],"import React from 'react'\r\nimport Main from './components/Main'\r\nimport { Title } from './styles/Main'\r\n\r\nconst GenderAgeApp = () => {\r\n    return (\r\n        <>\r\n            <div className=\"navbar navbar-light bg-primary mb-3\">\r\n                <h1 className=\"title\">Gender and Age App</h1>\r\n            </div>\r\n\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GenderAgeApp\r\n","D:\\Cursos\\React\\gender-age-app\\src\\components\\Main.js",["28","29"],"import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { storage } from '../firebase/firebase-config';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Dots } from 'react-activity';\r\nimport 'react-activity/dist/react-activity.css';\r\nimport {\r\n    Container,\r\n    Menu,\r\n    Submenu,\r\n    Result,\r\n    FileContainer,\r\n    ImgFile,\r\n    VideoFile,\r\n    CanvasFile,\r\n    OptionsContainer,\r\n    ButtonFile,\r\n    ButtonPredict,\r\n    PredictText,\r\n    ResultImageContainer,\r\n    ResultsContainer,\r\n    ResultImage,\r\n    Data,\r\n    DataContainer\r\n} from '../styles/Main'\r\n\r\nconst axios = require('axios').default;\r\n\r\nconst Main = () => {\r\n\r\n    let w, h, ratio;\r\n\r\n    const fileInputRef = useRef();\r\n\r\n    const [image, setImage] = useState();\r\n    const [video, setVideo] = useState();\r\n    const [imageToFirebase, setImageToFirebase] = useState()\r\n\r\n    const [preview, setPreview] = useState();\r\n    const [videoPreview, setVideoPreview] = useState();\r\n    const videoSnapshot = useRef();\r\n    const videoRef = useRef();\r\n\r\n\r\n    const [imageName, setImageName] = useState('');\r\n    const [transfered, setTransfered] = useState(0)\r\n    const [uploading, setUploading] = useState(false);\r\n    const [transferedFinished, setTransferedFinished] = useState(false)\r\n    const [result, setResult] = useState();\r\n    const [animating, setAnimating] = useState(false)\r\n\r\n    const handleChangeFile = (event) => {\r\n        event.preventDefault();\r\n\r\n\r\n        const file = event.target.files[0];\r\n\r\n        if (file) {\r\n            if (file.type.substr(0, 5) === 'video') {\r\n                setVideo(file)\r\n            }\r\n            else if (file && file.type.substr(0, 5) === 'image') {\r\n                setImage(file)\r\n                setImageToFirebase(file)\r\n            } else {\r\n                console.log('No es imagen o video')\r\n                setImage(null);\r\n                setVideo(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleFile = (file, type) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            if (type === 'imagen') {\r\n                setPreview(reader.result);\r\n            } else {\r\n                setVideoPreview(reader.result)\r\n            }\r\n        }\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const handleSnap = () => {\r\n        const context = videoSnapshot.current.getContext('2d')\r\n        context.fillRect(0, 0, w, h);\r\n        context.drawImage(videoRef.current, 0, 0, w, h)\r\n\r\n        videoSnapshot.current.toBlob(function (blob) {\r\n            setImageToFirebase(blob)\r\n        }, 'image/jpeg')\r\n    }\r\n\r\n    const handleFirebaseUpload = async () => {\r\n\r\n        console.log('start of upload...')\r\n\r\n        if (imageToFirebase) {\r\n            setUploading(true);\r\n            setTransfered(0);\r\n\r\n            const name = uuidv4();\r\n            const filename = name + '.jpg';\r\n\r\n            const storageRef = storage.ref(`uploaded/${filename}`);\r\n            const task = storageRef.put(imageToFirebase);\r\n\r\n            task.on('state_changed', (taskSnapshot) => {\r\n                console.log(`${taskSnapshot.bytesTransferred} transfered out of ${taskSnapshot.totalBytes}`);\r\n\r\n                setTransfered(\r\n                    Math.round(taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100\r\n                )\r\n            })\r\n\r\n\r\n            setImageName(name);\r\n\r\n            try {\r\n                await task;\r\n                const url = await storageRef.getDownloadURL();\r\n                setUploading(false);\r\n                setTransferedFinished(true);\r\n                return url;\r\n            } catch (error) {\r\n                console.log('Error downloading the image url')\r\n                return null;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n\r\n        setAnimating(true);\r\n        await handleFirebaseUpload();\r\n    };\r\n\r\n    const handlePrediction = useCallback(\r\n        async () => {\r\n            const resp = await axios.post('https://ai-backend-project.herokuapp.com/detectFaces', {\r\n                imageName: imageName.toString()\r\n            })\r\n\r\n            setResult(resp.data);\r\n            setAnimating(false)\r\n        },\r\n        [imageName],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        if (image) {\r\n            handleFile(image, 'imagen')\r\n        } else {\r\n            setPreview(null)\r\n        }\r\n    }, [image]);\r\n\r\n    useEffect(() => {\r\n        if (video) {\r\n            handleFile(video, 'video')\r\n        } else {\r\n            setVideoPreview(null)\r\n        }\r\n    }, [video]);\r\n\r\n    useEffect(() => {\r\n        if (transferedFinished) {\r\n            handlePrediction()\r\n        } else {\r\n            setResult(null)\r\n        }\r\n    }, [transferedFinished, handlePrediction,])\r\n\r\n    return (\r\n        <Container>\r\n            <Menu>\r\n                <Submenu>\r\n                    <FileContainer>\r\n                        {\r\n                            preview ? (\r\n                                <ImgFile\r\n                                    src={preview ? preview : 'https://via.placeholder.com/500/0B6EEF?text=F'}\r\n                                    alt=\"preview\"\r\n                                />\r\n                            ) : (\r\n                                videoPreview ? (\r\n                                    <>\r\n                                        <VideoFile ref={videoRef} controls src={videoPreview ? videoPreview : ''} alt=\"videoPreview\" onLoadedMetadata={({ target }) => {\r\n                                            ratio = target.videoWidth / target.videoHeight;\r\n                                            w = target.videoWidth - 100;\r\n                                            h = parseInt(w / ratio, 10);\r\n                                            videoSnapshot.current.width = w;\r\n                                            videoSnapshot.current.height = h;\r\n                                        }} />\r\n\r\n                                        <CanvasFile ref={videoSnapshot} width=\"300\" height=\"300\"></CanvasFile>\r\n\r\n                                    </>\r\n                                )\r\n                                    : (\r\n                                        <ImgFile\r\n                                            className=\"card-img-top\"\r\n                                            src={'https://via.placeholder.com/500/0B6EEF?text=F'}\r\n                                            alt=\"preview\"\r\n                                        />\r\n                                    ))\r\n                        }\r\n                    </FileContainer>\r\n                    <OptionsContainer>\r\n                        <input\r\n                            className=\"file-button\"\r\n                            style={{ display: 'none' }}\r\n                            type=\"file\"\r\n                            ref={fileInputRef}\r\n                            accept=\"image/*|video/*\"\r\n                            onChange={(event) => {\r\n                                console.log(event)\r\n                                handleChangeFile(event);\r\n                            }}\r\n                        />\r\n                        {\r\n                            videoPreview ? (\r\n                                <ButtonFile onClick={() => handleSnap()}>Snapshot</ButtonFile>\r\n                            ) : null\r\n                        }\r\n                        {\r\n                            preview || videoPreview ? (\r\n                                <>\r\n                                    <ButtonFile\r\n                                        onClick={() => {\r\n                                            setImage(null)\r\n                                            setVideo(null)\r\n                                            setResult(null)\r\n                                            setTransferedFinished(false)\r\n                                        }}\r\n                                    >\r\n                                        Remove File\r\n                                    </ButtonFile>\r\n                                    <ButtonPredict onClick={(e) => handleUpload(e)}>\r\n                                        <PredictText>\r\n                                            Predict\r\n                                        </PredictText>\r\n                                    </ButtonPredict>\r\n                                    <Dots className=\"dots\" color=\"#727981\" size={35} speed={1} animating={animating} />\r\n                                </>\r\n                            ) : (\r\n                                <ButtonFile\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        fileInputRef.current.click();\r\n                                    }}>\r\n                                    Open File\r\n                                </ButtonFile>\r\n                            )\r\n                        }\r\n\r\n                    </OptionsContainer>\r\n                </Submenu>\r\n\r\n                <Result>\r\n                    <ResultImageContainer>\r\n                        <ResultImage\r\n                            src={result ? result.imageURL : 'https://via.placeholder.com/500x600/0B6EEF?text=R'}\r\n                            alt=\"preview\"\r\n                        />\r\n                    </ResultImageContainer>\r\n                    <ResultsContainer>\r\n                        {\r\n                            result ? (\r\n                                <DataContainer>\r\n                                    <Data>\r\n                                        <span style={{ fontWeight: 'bold' }}>Age: </span>\r\n                                        <span style={{ fontWeight: 'bold' }}>Success:  </span>\r\n                                        <span style={{ fontWeight: 'bold' }}>Gender:   </span>\r\n                                        <span style={{ fontWeight: 'bold' }}>Success:  </span>\r\n                                    </Data>\r\n                                    <Data>\r\n                                        <span> {result ? result.response[0].age : ''}</span>\r\n                                        <span> {result ? (result.response[0].ageCofidence * 100).toFixed(2) + '%' : ''} </span>\r\n                                        <span>{result ? result.response[0].gender : ''} </span>\r\n                                        <span>{result ? (result.response[0].genderCofidence * 100).toFixed(2) + '%' : ''} </span>\r\n                                    </Data>\r\n                                </DataContainer>\r\n                            ) : null\r\n                        }\r\n\r\n\r\n                    </ResultsContainer>\r\n                </Result>\r\n            </Menu>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","D:\\Cursos\\React\\gender-age-app\\src\\firebase\\firebase-config.js",[],"D:\\Cursos\\React\\gender-age-app\\src\\styles\\Main.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":3,"column":10,"nodeType":"36","messageId":"37","endLine":3,"endColumn":15},{"ruleId":"34","severity":1,"message":"38","line":45,"column":12,"nodeType":"36","messageId":"37","endLine":45,"endColumn":22},{"ruleId":"34","severity":1,"message":"39","line":46,"column":12,"nodeType":"36","messageId":"37","endLine":46,"endColumn":21},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Title' is defined but never used.","Identifier","unusedVar","'transfered' is assigned a value but never used.","'uploading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]